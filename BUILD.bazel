load("@rules_python//python:defs.bzl", "py_binary", "py_library")
load("@rules_python//python/entry_points:py_console_script_binary.bzl", "py_console_script_binary")

package(default_visibility = ["//visibility:public"])

# Export pyproject.toml so it can be used by linters
# Source: https://github.com/aspect-build/rules_lint/blob/main/docs/linting.md
exports_files(
    [
        ".gitignore",
        "MODULE.bazel",
        ".coveragerc",
        "pyproject.toml",
    ] + glob(
        include = [
            "scripts/**",
        ],
        allow_empty = True,
    ),
)

filegroup(
    name = "config_files",
    srcs = glob(
        include = [
            "**/*.yaml",
            "**/.*.yaml",
            "**/*.toml",
            "**/.*.toml",
            "**/*.json",
            "**/.*.json",
        ],
        allow_empty = True,
        exclude = [
            ".venv/**",
            "*bazel-*/**",
            "*cache*/**",
            ".*cache*/**",
        ],
    ),
)

filegroup(
    name = "all_files",
    srcs = [
        ":config_files",
        "//tests:test_files",
    ],
)

py_library(
    name = "core_deps",
    deps = [
        "@rules_python//python/runfiles",
    ] + [
        "@my_deps//{}".format(f)
        for f in [
            "yamllint",
            "ruamel_yaml_clib",
            "ruamel_yaml",
            "yamlfmt",
            "taplo",
            "beautifulsoup4",
            "coverage",
            "iniconfig",
            "jinja2",
            "markupsafe",
            "packaging",
            "pluggy",
            "pygments",
            "pytz",
            "types_pytz",
            "types_requests",
            "mypy",
            "ruff",
            "soupsieve",
            "decorator",
            "scipy",
            "pystoi",
            "mir_eval",
            "pyodbc",
            "pesq",
            "einops",
            "astroid",
            "dill",
            "cached_property",
            "pb_bss_eval",
            "pylint",
            "pydantic_core",
            "pydantic",
            "pylint_plugin_utils",
            "pylint_pytest",
            "pylint_pydantic",
            "pylint_protobuf",
            "bazel_runfiles",
            "grpcio",
            "types_protobuf",
        ]
    ],
)

py_library(
    name = "py_test_deps",
    srcs = [],
    deps = [
        ":core_deps",
    ] + [
        "@my_deps//{}".format(f)
        for f in [
            "pytest",
            "pytest_ruff",
            "pytest_cov",
            "pytest_html",
            "pytest_pylint",
            "pytest_html_merger",
            "pytest_metadata",
            "pytest_mypy",
            "pytest_sugar",
        ]
    ],
)

alias(
    name = "format",
    actual = "//tools/format:format",
)

alias(
    name = "fix",
    actual = "//tools/lint:fix",
)

alias(
    name = "b.fix",
    actual = "//tools/lint:buildifier.fix",
)

alias(
    name = "format.check",
    actual = "//tools/format:format.check",
)

alias(
    name = "check",
    actual = "//tools/lint:check",
)

alias(
    name = "check_all",
    actual = "//tools/lint:check_all",
)

alias(
    name = "ruff_bin",
    actual = "@my_deps_312_ruff//:bin/ruff",
)

alias(
    name = "taplo_bin",
    actual = "@my_deps_312_taplo//:bin/taplo",
)

alias(
    name = "yamlfmt_bin",
    actual = "@yamlfmt//:yamlfmt",
)

alias(
    name = "biome_bin",
    actual = "@biome//file:downloaded",
)

alias(
    name = "buildiier_bin",
    actual = "@buildifier_prebuilt//:buildifier",
)

# Direct alias to the ruff binary from the wheel
# Source: Modern whl_mods approach for pre-built binaries

py_console_script_binary(
    name = "pylint",
    binary_rule = py_binary,
    data = [
        "//:.gitignore",
        "//:all_files",
    ],
    pkg = "@my_deps//pylint:pkg",
    deps = [
        ":core_deps",
        "//data:proto_py_pb2",
    ],
)

py_console_script_binary(
    name = "yamllint",
    binary_rule = py_binary,
    pkg = "@my_deps//yamllint:pkg",
    deps = [
        ":core_deps",
    ],
)

py_console_script_binary(
    name = "mypy",
    binary_rule = py_binary,
    pkg = "@my_deps//mypy:pkg",
    deps = [
        "//data:proto_py_pb2",
        "//tests:lib_test_fixtures",
    ],
)

test_suite(
    name = "fmt_lint_test",
    tests = [
        "//tools/format:format_test",
        "//tools/lint:lint_test",
    ],
)
